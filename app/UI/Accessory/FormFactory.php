<?php

declare(strict_types=1);

namespace App\UI\Accessory;

use Nette\Application\UI\Form;
// use Nette\Localization\Translator;
use Nette\Forms\Container;
use Nette\Security\User;

/**
 * Factory for creating general forms with optional CSRF protection.
 */
final class FormFactory
{
    protected $form;

    /**
     * Dependency injection of the current user session.
     */
    public function __construct(
        // private Translator $translator,
        private User $user
    ) {
        $this->form = new Form();
    }

    private function phoneAdd()
    {
        Container::extensionMethod('addPhone', function (Container $form, string $name, ?string $label = null) {
            return $form->addText($name, $label)
                ->addRule($form::Pattern, '–í–≤–µ–¥–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä', PhoneNumber::PHONE_REGEX);
        });
        $this->form->addPhone('phone', '')
            //->setRequired('–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.')
            ->setHtmlType('tel')
            ->setHtmlAttribute('placeholder', '‚òé +7 999 333 22 22') // üì±
            ->setHtmlAttribute('id', 'user_phone_input');
    }

    private function nameAdd()
    {
        $this->form->addText('username', '')
            ->setHtmlAttribute('placeholder', 'üë§ –ò–º—è:')
            // ->setRequired('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.')
            ->addRule($this->form::MinLength, '–ò–º—è –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ %d —Å–∏–º–≤–æ–ª–æ–≤', 3)
            ->addRule($this->form::Pattern, '–ò–º—è —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤, –¥–µ—Ñ–∏—Å–æ–≤ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π', '^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\-_ ]{3,125}$')
            ->setMaxLength(125);
    }

    private function emailAdd()
    {
        $this->form->addEmail('email', '')
            ->setHtmlAttribute('placeholder', 'üìß Email:')
            ->addRule($this->form::Email, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.')
            ->addFilter(function ($value) {
                return filter_var($value, FILTER_SANITIZE_EMAIL);
            });
        ;
    }

    private function passwordAdd()
    {
        $this->form->addPassword('password', '')
            ->setHtmlAttribute('placeholder', 'üîí –ü–∞—Ä–æ–ª—å:')
            ->setRequired('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.')
            ->addRule($this->form::MinLength, '–ü–∞—Ä–æ–ª—å –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ %d —Å–∏–º–≤–æ–ª–æ–≤', PASSWORD_MIN_LENGTH)
            ->setMaxLength(120);
    }

    /**
     * Create a new form instance. If user is logged in, add CSRF protection.
     */
    public function create(): Form
    {
        // $form->setTranslator($this->translator);
        $renderer = $this->form->getRenderer();
        $renderer->wrappers['group']['container'] = 'div class="my1 mx-auto pb2 px2"';
        $renderer->wrappers['controls']['container'] = 'div';
        $renderer->wrappers['pair']['container'] = 'div';
        $renderer->wrappers['label']['container'] = null;
        $renderer->wrappers['control']['container'] = null;

        return $this->form;
    }

    public function createLoginForm(): Form
    {
        $form = $this->create();
        $form->addProtection('Csrf error');
        // $form->addGroup('--- üë• ---');
        $form->addGroup('');
        $this->nameAdd();
        $form['username']->setRequired();
        // $this->phoneAdd();
        $this->passwordAdd();

        return $form;
    }

    public function createHomeLoginForm(): Form
    {
        $form = $this->create();
        $form->addProtection('–û—à–∏–±–∫–∞. –ü–æ—á–∏—Å—Ç–∏—Ç–µ –∫—É–∫–∏, –∑–∞–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–µ —Å–Ω–æ–≤–∞');
        $form->addGroup('');
        $this->nameAdd();
        $this->phoneAdd();
        $this->emailAdd();
        $this->passwordAdd();

        return $form;
    }

    public function createClientRatingForm()
    {
        $form = $this->create();
        $form->addProtection('–û—à–∏–±–∫–∞. –ü–æ—á–∏—Å—Ç–∏—Ç–µ –∫—É–∫–∏, –∑–∞–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–µ —Å–Ω–æ–≤–∞');

        $form->setHtmlAttribute('id', 'client_rating_form')
            ->setHtmlAttribute('class', 'center mb2 mr2');

        $form->addGroup('');
        $form->addRadioList('rating_value', null, [1 => 1, 2 => 2, 3 => 3, 4 => 4, 5 => 5])
            ->setRequired('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É');

        $form->addGroup('');
        $form->addHidden('client_id_who', null);
        $form->addHidden('client_id_to_whom', null);
        $form->addSubmit('client_rating_form_submit', '–û—Ü–µ–Ω–∏—Ç—å ');

        return $form;
    }
}