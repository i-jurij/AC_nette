{block header}
{default $backlink = ''}
<header class="p1 flex justify-between content-center">

	<div id="location_div" class="button pseudo" aria-label="Кнопка выбора города">{$geo|noescape}</div>

	<div class="right-align">
		<a class="pseudo button " n:if="!$user->isLoggedIn()" n:href=":Home:Sign:in, backlink: $backlink"
			aria-label="Кнопка входа">Войти</a>
		<button class="pseudo px0" n:if="$user->isLoggedIn()" onclick="Chat.getMessage({$user->getId()}, false)"
			aria-label="Кнопка Сообщения">
			<span class="label" id="countChatMessagesClient" data-count="{$count_client_chat}">
				{$count_client_chat}
			</span>
			<span class="align-middle">&nbsp;&#128276;</span>
		</button>

		<div class="inline-block dropdown_div" tabindex='0'
			onblur="document.querySelector('#profile_input').checked = false;">
			<label class="pseudo button underline" n:if="!!$user->getIdentity()" for="profile_input"
				aria-label="Кнопка меню профиля">
				{$user->getIdentity()->username}
			</label>
			<input id="profile_input" type="checkbox" style="display: none">
			<div class="dropdown_menu round shadow left-align mt0">
				<a n:href=":Home:Client:Offer:default" aria-label="Кнопка ">Объявления</a>

				<a n:href=":Home:Client:Profile:" aria-label="Кнопка ">Профиль</a>
				<a n:href=":Home:Sign:out" aria-label="Кнопка Выход">Выход</a>
			</div>
		</div>
		{*<a class="pseudo button" n:if="$user->isLoggedIn()" n:href=":Home:Sign:out">
			Выйти
		</a> *}
		<a class="button " n:if="$user->isLoggedIn() && !$presenter->isLinkCurrent(':Home:Client:Offer:add')"
			n:href=":Home:Client:Offer:add" aria-label="Кнопка Разместить объявление">Разместить объявление</a>
	</div>
</header>

<script n:syntax="double">
	let url_js_fetch = {{link :Home:Geo:jsFetch}};
	let url_location_to_server_js = {{link :Home:saveToBackend}};

	let url_chat = {{link :Home:Client:Chat:default}}

	Chat = {
		count_client_chat: document.querySelector('#countChatMessagesClient'),
		countUp: 0,
		toTop: function(id){
			let element = document.querySelector('#'+id);
			if (element) {
				element.scrollIntoView({ behavior: "smooth", block: "start", inline: "nearest" });
			}
		},
		firstGetChat: function (client_id_who, offer_id) {
			let formData = new FormData();
			formData.set({{\Ijurij\Geolocation\Lib\Csrf::$token_name}}, {{\Ijurij\Geolocation\Lib\Csrf::getToken()}});
			formData.set('firstGetChat', 'true');
			formData.set('client_id_who', client_id_who);
			formData.set('offer_id', offer_id);
			
			fetch(url_chat, {
				responseType: 'json',
				method: 'POST',
				credentials: 'same-origin',
				headers: {'X-Requested-With': 'XMLHttpRequest'},
				body: formData
			})
			.then(response => response.json())
			.then(json => {
				if (json && (typeof json === 'string' || json instanceof String)) {
					document.body.insertAdjacentHTML('beforeend', json);
					document.querySelector('#chat_modal_window').checked = true;

					let cs = document.querySelector('#countChatMessagesClientOffer');
					if (cs) {
						cs.innerText = '';
					}
				}
			})
			.catch(error => console.error('Error:', error));
		},
		updNoReadCount: function(client_id_who, offer_id){
			// exec every 5 min eg
			return 'number of no read ';
		},
		updateChat: function(client_id_who, offer_id){
			let formData = new FormData();
			formData.set({{\Ijurij\Geolocation\Lib\Csrf::$token_name}}, {{\Ijurij\Geolocation\Lib\Csrf::getToken()}});
			formData.set('update_chat', 'true');
			formData.set('client_id', client_id_who);
			formData.set('offer_id', offer_id);
			
			fetch(url_chat, {
			responseType: 'json',
			method: 'POST',
			credentials: 'same-origin',
			headers: {'X-Requested-With': 'XMLHttpRequest'},
			body: formData
			})
			.then(response => response.json())
			.then(json => {
				if (json && (typeof json === 'string' || json instanceof String)) {
					if (document.querySelector('#chat_modal_window').checked != true) {
						document.querySelector('#chat_modal_window').checked = true;
					}
					if (document.querySelector('#chat_content_section')) {
						document.querySelector('#chat_content_section').insertAdjacentHTML('beforeend', json);
					}
				}
			})
			.catch(error => console.error('Error:', error));
		},
		getMessage: async function(client_id_who, offer_id){	
			if (Chat.countUp === 0) {
				Chat.firstGetChat(client_id_who, offer_id);
			} else {
				Chat.updateChat(client_id_who, offer_id);
			}
			Chat.countUp++;
		},
		createMessage: function(client_id_to_whom){
			let chat_message = document.querySelector('#chat_message_'+client_id_to_whom);
			if (chat_message) {
				let mes = chat_message.value;
				if (mes) {
				let formData = new FormData();
					formData.set({{\Ijurij\Geolocation\Lib\Csrf::$token_name}}, {{\Ijurij\Geolocation\Lib\Csrf::getToken()}});
					formData.set('createMessage_chat', 'true');
					formData.set('client_id_who', {{$user->getId()}});
					formData.set('client_id_to_whom', client_id_to_whom);
					formData.set('offer_id', {{(!empty($offers[0]['id'])) ? $offers[0]['id'] : null}});
					formData.set('message', mes);
					
					fetch(url_chat, {
						responseType: 'json',
						method: 'POST',
						credentials: 'same-origin',
						headers: {'X-Requested-With': 'XMLHttpRequest'},
						body: formData
					})
					.then(response => response.json())
					.then(json => {
						if (json) {
							let html = '<div class="bgcontent rounded p1 mb1 mr1">'+
								'<span class="h4" data-id="'+json.id+'" data-offer_id="'+json.offer_id+'"'+
									'data-client_id_who="'+json.client_id_who+'"'+
									'data-client_id_to_whom="'+json.client_id_who+'" data-created_at="'+json.created_at+'">'+
									'Вы, '+ new Date(json.created_at).toLocaleString() +
								'</span>'+
								'<p class="">'+json.message+'</p>'+
							'</div>';
							
							document.querySelector('#chat_message_wrapper_'+json.client_id_to_whom).insertAdjacentHTML('beforebegin', html);
							chat_message.value = '';
						}
					})
					.catch(error => console.error('Error:', error));
				}
			}
		}
	}
	
	window.addEventListener("load", (event) => {

	});
</script>
{/block}